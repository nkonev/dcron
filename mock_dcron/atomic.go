// Code generated by MockGen. DO NOT EDIT.
// Source: atomic.go

// Package mock_dcron is a generated GoMock package.
package mock_dcron

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAtomic is a mock of Atomic interface.
type MockAtomic struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicMockRecorder
}

// MockAtomicMockRecorder is the mock recorder for MockAtomic.
type MockAtomicMockRecorder struct {
	mock *MockAtomic
}

// NewMockAtomic creates a new mock instance.
func NewMockAtomic(ctrl *gomock.Controller) *MockAtomic {
	mock := &MockAtomic{ctrl: ctrl}
	mock.recorder = &MockAtomicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtomic) EXPECT() *MockAtomicMockRecorder {
	return m.recorder
}

// SetIfNotExists mocks base method.
func (m *MockAtomic) SetIfNotExists(ctx context.Context, key, value string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfNotExists", ctx, key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetIfNotExists indicates an expected call of SetIfNotExists.
func (mr *MockAtomicMockRecorder) SetIfNotExists(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfNotExists", reflect.TypeOf((*MockAtomic)(nil).SetIfNotExists), ctx, key, value)
}

// UnsetIfExists mocks base method.
func (m *MockAtomic) UnsetIfExists(ctx context.Context, key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetIfExists", ctx, key, value)
}

// UnsetIfExists indicates an expected call of UnsetIfExists.
func (mr *MockAtomicMockRecorder) UnsetIfExists(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetIfExists", reflect.TypeOf((*MockAtomic)(nil).UnsetIfExists), ctx, key, value)
}
